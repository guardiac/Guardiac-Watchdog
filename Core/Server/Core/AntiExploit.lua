-- [AntiExploit] - Doesn't allow for the exploiter to use exploits in your game.

local AntiExploit = {}

function AntiExploit:Init()
	self.ProtectedInstances = {}
	self.OriginalProperties = {}
	self.BlacklistedFunctions = {
		"LoadLibrary",
		"dofile",
		"loadstring",
		"getfenv",
		"setfenv",
		"newproxy",
		"gcinfo",
		"debug"
	}

	self:SetupEnvironmentProtection()
	self:MonitorInstances()
	self:SetupRemoteSecurity()
end

function AntiExploit:SetupEnvironmentProtection()
	local env = getfenv(0)
	local protected = {}

	for key, value in pairs(env) do
		protected[key] = value
	end

	setmetatable(protected, {
		__index = env,
		__newindex = function(_, key, value)
			self:Flag("EnvironmentTampering", {key = key, value = value})
		end
	})
end

function AntiExploit:MonitorInstances()
	game.DescendantAdded:Connect(function(instance)
		if self:IsIllegalInstance(instance) then
			self:Flag("IllegalInstance", instance)
			instance:Destroy()
		end
	end)
end

function AntiExploit:SetupRemoteSecurity()
	for _, remote in pairs(game:GetDescendants()) do
		if remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction") then
			self:ProtectRemote(remote)
		end
	end
end

function AntiExploit:ProtectRemote(remote)
	local originalInvoke = remote.InvokeServer
	remote.InvokeServer = function(...)
		local args = {...}
		if self:IsExploitAttempt(args) then
			self:Flag("RemoteExploit", {remote = remote, args = args})
			return
		end
		return originalInvoke(...)
	end
end

function AntiExploit:IsExploitAttempt(args)
	for _, arg in pairs(args) do
		if typeof(arg) == "function" then
			return true
		end
		if typeof(arg) == "Instance" and self:IsIllegalInstance(arg) then
			return true
		end
	end
	return false
end

function AntiExploit:IsIllegalInstance(instance)
	local blacklistedClasses = {
		"LocalScript",
		"ModuleScript",
		"Script"
	}

	return table.find(blacklistedClasses, instance.ClassName) and 
		not instance:IsDescendantOf(game.ServerScriptService)
end

function AntiExploit:Flag(type, data)
	self.Core:HandleExploit(type, data)
end

return AntiExploit
